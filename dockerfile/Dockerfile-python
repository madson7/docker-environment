ARG IMAGE_VERSION=${IMAGE_VERSION}
ARG IMAGE_TYPE=${IMAGE_TYPE}

FROM python:${IMAGE_VERSION}-${IMAGE_TYPE} as runner

# Definir diretório de trabalho
WORKDIR /app

# Definir variáveis de ambiente para aumentar a segurança
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Atualizar pacotes e instalar dependências do sistema, baseada em Debian/Ubuntu, Alpine ou Red Hat/CentOS/Fedora
RUN if [ "$(cat /etc/os-release | grep -o 'Debian\|Ubuntu' | head -n1)" != 'Debian\|Ubuntu' ]; \
    then echo 'nothing to do' ; \
    else apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends gcc; \
    fi
RUN if [ "$(cat /etc/os-release | grep -o 'Alpine' | head -n1)" != "Alpine" ]; \
    then echo 'nothing to do' ; \
    else apk update && \
    apk upgrade -U -a && \
    apk add --no-cache gcc; \
    fi
RUN if [ "$(cat /etc/os-release | grep -o 'Red Hat\|CentOS\|Fedora' | head -n1)" != 'Red Hat\|CentOS\|Fedora' ]; \
    then echo 'nothing to do' ; \
    else yum update -y && \
    yum install -y --no-install-recommends gcc; \
    fi

# Copiar arquivos de código fonte e runlocal
COPY ./src /app/src

# Instalar dependências Python especificadas no requirements.txt
RUN pip install --no-cache-dir -r ./src/requirements.txt

# Remover pacotes de build para reduzir o tamanho da imagem
RUN if [ "$(cat /etc/os-release | grep -o 'Debian\|Ubuntu' | head -n1)" != 'Debian\|Ubuntu' ]; \
    then echo 'nothing to do' ; \
    else apt-get remove -y gcc && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/* \
    ; fi

# Definir usuário não privilegiado para execução do aplicativo
RUN useradd -m -U appuser
USER appuser

# Executar o aplicativo
CMD ["python", "/app/src/app.py", "--host=0.0.0.0"]